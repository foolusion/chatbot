// Code generated by protoc-gen-go.
// source: botrpc.proto
// DO NOT EDIT!

/*
Package botrpc is a generated protocol buffer package.

It is generated from these files:
	botrpc.proto

It has these top-level messages:
	Func
	FuncStatus
	ChatMessage
*/
package botrpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FuncStatus_Status int32

const (
	FuncStatus_ERROR FuncStatus_Status = 0
	FuncStatus_OK    FuncStatus_Status = 1
)

var FuncStatus_Status_name = map[int32]string{
	0: "ERROR",
	1: "OK",
}
var FuncStatus_Status_value = map[string]int32{
	"ERROR": 0,
	"OK":    1,
}

func (x FuncStatus_Status) String() string {
	return proto.EnumName(FuncStatus_Status_name, int32(x))
}
func (FuncStatus_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type Func struct {
	Addr     string `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
	Trigger  string `protobuf:"bytes,2,opt,name=trigger" json:"trigger,omitempty"`
	FuncName string `protobuf:"bytes,3,opt,name=func_name,json=funcName" json:"func_name,omitempty"`
	Usage    string `protobuf:"bytes,4,opt,name=usage" json:"usage,omitempty"`
}

func (m *Func) Reset()                    { *m = Func{} }
func (m *Func) String() string            { return proto.CompactTextString(m) }
func (*Func) ProtoMessage()               {}
func (*Func) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type FuncStatus struct {
	Status FuncStatus_Status `protobuf:"varint,1,opt,name=status,enum=botrpc.FuncStatus_Status" json:"status,omitempty"`
}

func (m *FuncStatus) Reset()                    { *m = FuncStatus{} }
func (m *FuncStatus) String() string            { return proto.CompactTextString(m) }
func (*FuncStatus) ProtoMessage()               {}
func (*FuncStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type ChatMessage struct {
	Body     string `protobuf:"bytes,1,opt,name=body" json:"body,omitempty"`
	User     string `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
	Channel  string `protobuf:"bytes,3,opt,name=channel" json:"channel,omitempty"`
	FuncName string `protobuf:"bytes,4,opt,name=func_name,json=funcName" json:"func_name,omitempty"`
}

func (m *ChatMessage) Reset()                    { *m = ChatMessage{} }
func (m *ChatMessage) String() string            { return proto.CompactTextString(m) }
func (*ChatMessage) ProtoMessage()               {}
func (*ChatMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto.RegisterType((*Func)(nil), "botrpc.Func")
	proto.RegisterType((*FuncStatus)(nil), "botrpc.FuncStatus")
	proto.RegisterType((*ChatMessage)(nil), "botrpc.ChatMessage")
	proto.RegisterEnum("botrpc.FuncStatus_Status", FuncStatus_Status_name, FuncStatus_Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for Bot service

type BotClient interface {
	// Register registers a function service to the bot. Information about
	// the registration including the success is returned in the
	// Registration.
	Add(ctx context.Context, in *Func, opts ...grpc.CallOption) (*FuncStatus, error)
	Remove(ctx context.Context, in *Func, opts ...grpc.CallOption) (*FuncStatus, error)
	SendMessage(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (Bot_SendMessageClient, error)
}

type botClient struct {
	cc *grpc.ClientConn
}

func NewBotClient(cc *grpc.ClientConn) BotClient {
	return &botClient{cc}
}

func (c *botClient) Add(ctx context.Context, in *Func, opts ...grpc.CallOption) (*FuncStatus, error) {
	out := new(FuncStatus)
	err := grpc.Invoke(ctx, "/botrpc.Bot/Add", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) Remove(ctx context.Context, in *Func, opts ...grpc.CallOption) (*FuncStatus, error) {
	out := new(FuncStatus)
	err := grpc.Invoke(ctx, "/botrpc.Bot/Remove", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botClient) SendMessage(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (Bot_SendMessageClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Bot_serviceDesc.Streams[0], c.cc, "/botrpc.Bot/SendMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &botSendMessageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Bot_SendMessageClient interface {
	Recv() (*ChatMessage, error)
	grpc.ClientStream
}

type botSendMessageClient struct {
	grpc.ClientStream
}

func (x *botSendMessageClient) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Bot service

type BotServer interface {
	// Register registers a function service to the bot. Information about
	// the registration including the success is returned in the
	// Registration.
	Add(context.Context, *Func) (*FuncStatus, error)
	Remove(context.Context, *Func) (*FuncStatus, error)
	SendMessage(*ChatMessage, Bot_SendMessageServer) error
}

func RegisterBotServer(s *grpc.Server, srv BotServer) {
	s.RegisterService(&_Bot_serviceDesc, srv)
}

func _Bot_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Func)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/botrpc.Bot/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).Add(ctx, req.(*Func))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Func)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/botrpc.Bot/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServer).Remove(ctx, req.(*Func))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bot_SendMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BotServer).SendMessage(m, &botSendMessageServer{stream})
}

type Bot_SendMessageServer interface {
	Send(*ChatMessage) error
	grpc.ServerStream
}

type botSendMessageServer struct {
	grpc.ServerStream
}

func (x *botSendMessageServer) Send(m *ChatMessage) error {
	return x.ServerStream.SendMsg(m)
}

var _Bot_serviceDesc = grpc.ServiceDesc{
	ServiceName: "botrpc.Bot",
	HandlerType: (*BotServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Bot_Add_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _Bot_Remove_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendMessage",
			Handler:       _Bot_SendMessage_Handler,
			ServerStreams: true,
		},
	},
}

// Client API for BotFuncs service

type BotFuncsClient interface {
	SendMessage(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (BotFuncs_SendMessageClient, error)
}

type botFuncsClient struct {
	cc *grpc.ClientConn
}

func NewBotFuncsClient(cc *grpc.ClientConn) BotFuncsClient {
	return &botFuncsClient{cc}
}

func (c *botFuncsClient) SendMessage(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (BotFuncs_SendMessageClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_BotFuncs_serviceDesc.Streams[0], c.cc, "/botrpc.BotFuncs/SendMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &botFuncsSendMessageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BotFuncs_SendMessageClient interface {
	Recv() (*ChatMessage, error)
	grpc.ClientStream
}

type botFuncsSendMessageClient struct {
	grpc.ClientStream
}

func (x *botFuncsSendMessageClient) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for BotFuncs service

type BotFuncsServer interface {
	SendMessage(*ChatMessage, BotFuncs_SendMessageServer) error
}

func RegisterBotFuncsServer(s *grpc.Server, srv BotFuncsServer) {
	s.RegisterService(&_BotFuncs_serviceDesc, srv)
}

func _BotFuncs_SendMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BotFuncsServer).SendMessage(m, &botFuncsSendMessageServer{stream})
}

type BotFuncs_SendMessageServer interface {
	Send(*ChatMessage) error
	grpc.ServerStream
}

type botFuncsSendMessageServer struct {
	grpc.ServerStream
}

func (x *botFuncsSendMessageServer) Send(m *ChatMessage) error {
	return x.ServerStream.SendMsg(m)
}

var _BotFuncs_serviceDesc = grpc.ServiceDesc{
	ServiceName: "botrpc.BotFuncs",
	HandlerType: (*BotFuncsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendMessage",
			Handler:       _BotFuncs_SendMessage_Handler,
			ServerStreams: true,
		},
	},
}

var fileDescriptor0 = []byte{
	// 299 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x92, 0xc1, 0x4b, 0xc3, 0x30,
	0x14, 0xc6, 0xd7, 0xad, 0x8b, 0xeb, 0xdb, 0x90, 0xf1, 0xf4, 0x50, 0xb7, 0x8b, 0xe4, 0xa4, 0x20,
	0x45, 0xeb, 0xd1, 0x93, 0x8a, 0x7a, 0x10, 0x1d, 0x64, 0x57, 0x41, 0xd2, 0x26, 0x76, 0xc2, 0xd6,
	0x8c, 0x26, 0x15, 0xfc, 0x5b, 0xfc, 0x67, 0x6d, 0xd2, 0x56, 0x37, 0xf4, 0x20, 0x78, 0xea, 0xf7,
	0x7d, 0xf9, 0x92, 0xf7, 0x7e, 0x50, 0x18, 0x25, 0xca, 0x14, 0xeb, 0x34, 0x5a, 0x17, 0xca, 0x28,
	0x24, 0xb5, 0xa3, 0x19, 0xf8, 0xb7, 0x65, 0x9e, 0x22, 0x82, 0xcf, 0x85, 0x28, 0x42, 0xef, 0xd0,
	0x3b, 0x0a, 0x98, 0xd3, 0x18, 0xc2, 0x8e, 0x29, 0x5e, 0xb3, 0x4c, 0x16, 0x61, 0xd7, 0xc5, 0xad,
	0xc5, 0x29, 0x04, 0x2f, 0xd5, 0xad, 0xe7, 0x9c, 0xaf, 0x64, 0xd8, 0x73, 0x67, 0x03, 0x1b, 0x3c,
	0x56, 0x1e, 0xf7, 0xa1, 0x5f, 0x6a, 0x9e, 0xc9, 0xd0, 0x77, 0x07, 0xb5, 0xa1, 0x4f, 0x00, 0x76,
	0xd0, 0xdc, 0x70, 0x53, 0x6a, 0x3c, 0x03, 0xa2, 0x9d, 0x72, 0x03, 0x77, 0xe3, 0x83, 0xa8, 0xd9,
	0xee, 0xbb, 0x13, 0xd5, 0x1f, 0xd6, 0x14, 0xe9, 0x14, 0x48, 0x73, 0x39, 0x80, 0xfe, 0x0d, 0x63,
	0x33, 0x36, 0xee, 0x20, 0x81, 0xee, 0xec, 0x7e, 0xec, 0xd1, 0x25, 0x0c, 0xaf, 0x17, 0xdc, 0x3c,
	0x48, 0x6d, 0x87, 0x59, 0x9a, 0x44, 0x89, 0xf7, 0x96, 0xc6, 0x6a, 0x9b, 0x95, 0xfa, 0x0b, 0xc5,
	0x69, 0x4b, 0x98, 0x2e, 0x78, 0x9e, 0xcb, 0x65, 0x43, 0xd1, 0xda, 0x6d, 0x42, 0x7f, 0x9b, 0x30,
	0xfe, 0xf0, 0xa0, 0x77, 0xa5, 0x0c, 0x1e, 0x43, 0xef, 0x52, 0x08, 0x1c, 0x6d, 0x2e, 0x3f, 0xc1,
	0x9f, 0x28, 0xb4, 0x83, 0x27, 0x40, 0x98, 0x5c, 0xa9, 0x37, 0xf9, 0xa7, 0xf6, 0x05, 0x0c, 0xe7,
	0x32, 0x17, 0x2d, 0xce, 0x5e, 0x5b, 0xda, 0x60, 0x9c, 0xfc, 0x16, 0xd2, 0xce, 0xa9, 0x17, 0xdf,
	0xc1, 0xa0, 0x5a, 0xce, 0xbe, 0xa7, 0xff, 0xf5, 0x50, 0x42, 0xdc, 0xaf, 0x72, 0xfe, 0x19, 0x00,
	0x00, 0xff, 0xff, 0xac, 0x84, 0x37, 0x9d, 0x3a, 0x02, 0x00, 0x00,
}
